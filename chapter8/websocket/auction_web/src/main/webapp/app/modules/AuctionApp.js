// Generated by CoffeeScript 1.6.3
var AuctionApp,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(function(require, exports, module) {
  var Auction, AuctionMessage;
  module.exports = AuctionApp;
  AuctionMessage = require("modules/AuctionMessage");
  return Auction = require("modules/Auction");
});

AuctionApp = (function() {
  var auctions, bid_prices, buildComboBox, itemDescription, itemName, myCombo, myLogin, photo, remainingTime, resultText, webSocket, writeToScreen,
    _this = this;

  webSocket = {};

  bid_prices = {};

  remainingTime = {};

  myCombo = {};

  resultText = {};

  myLogin = {};

  photo = {};

  itemName = {};

  itemDescription = {};

  auctions = {};

  function AuctionApp() {
    this.updateControls = __bind(this.updateControls, this);
    this.gotoAuction = __bind(this.gotoAuction, this);
    this.sendMessage = __bind(this.sendMessage, this);
    this.launch = __bind(this.launch, this);
  }

  AuctionApp.prototype.launch = function() {
    var _this = this;
    bid_prices = document.getElementById("bid_prices");
    remainingTime = document.getElementById("remainingTimeID");
    resultText = document.getElementById("result");
    myCombo = document.getElementById("comboID");
    myLogin = document.getElementById("loginID");
    photo = document.getElementById("photoId");
    itemName = document.getElementById("itemNameId");
    itemDescription = document.getElementById("itemDescription");
    if (window.WebSocket) {
      webSocket = new WebSocket("ws://localhost:8080/child-auction/auction");
      webSocket.onopen = function() {
        console.log("connection open...");
        _this.getAuctionsList();
      };
      webSocket.onclose = function(closeEvent) {
        console.log("close code " + closeEvent.code);
      };
      webSocket.onmessage = function(messageEvent) {
        console.log("data from server: " + messageEvent.data);
        if (typeof messageEvent.data === "string") {
          _this.handleMessage(messageEvent.data);
        }
      };
      return webSocket.onerror = function() {
        console.log("websocket error");
      };
    }
  };

  AuctionApp.prototype.handleMessage = function(data) {
    var message;
    message = JSON.parse(data);
    switch (message.type) {
      case "AUCTIONS_LIST":
        console.log("got auction list");
        this.auctions = message.data;
        return buildComboBox.call(this, message.data);
      case "LOGIN":
        writeToScreen("Lets try to win " + message.data.description + " " + message.data.name);
        return bid_prices.value = message.data.startingPrice;
      case "PREAUCTION_TIME_BROADCAST":
        return console.log("preauction message");
      case "AUCTION_TIME_BROADCAST":
        return remainingTime.value = message.data;
      case "PRICE_UPDATE":
        bid_prices.value = message.data;
        return console.log("price update message");
      case "RESULT":
        return writeToScreen(message.data);
      default:
        return console.log("unknown message");
    }
  };

  AuctionApp.prototype.getAuctionsList = function() {
    var auctionListMessage;
    auctionListMessage = new AuctionMessage("AUCTIONS_LIST", 'gime', "-1");
    this.sendMessage(auctionListMessage);
  };

  buildComboBox = function(auctions) {
    var auction, _i, _len;
    for (_i = 0, _len = auctions.length; _i < _len; _i++) {
      auction = auctions[_i];
      myCombo.add(new Option("" + auction.item.description + " - " + auction.item.name + " ", auction.auctionId));
    }
    myCombo.selectedIndex = 0;
    photo.setAttribute("src", auctions[0].item.photoUrl);
    itemName.textContent = auctions[0].item.name;
    itemDescription.textContent = auctions[0].item.description;
  };

  AuctionApp.prototype.sendMessage = function(auctionMessage) {
    if (webSocket.readyState === 1) {
      webSocket.send(auctionMessage.toJson());
    } else {
      return console.log("offline");
    }
  };

  AuctionApp.prototype.gotoAuction = function(login, auctionId) {
    var loginMessage;
    loginMessage = new AuctionMessage("LOGIN", login, auctionId);
    this.sendMessage(loginMessage);
  };

  AuctionApp.prototype.placeBid = function(myBid, auctionId) {
    var bidMessage;
    bidMessage = new AuctionMessage("BID", myBid, auctionId);
    return this.sendMessage(bidMessage);
  };

  AuctionApp.prototype.updateControls = function() {
    photo.setAttribute("src", this.auctions[myCombo.selectedIndex].item.photoUrl);
    itemName.textContent = this.auctions[myCombo.selectedIndex].item.name;
    return itemDescription.textContent = this.auctions[myCombo.selectedIndex].item.description;
  };

  writeToScreen = function(message) {
    var output, pre;
    output = document.getElementById("output");
    pre = document.createElement("p");
    pre.className = "badge badge-info";
    pre.style.wordWrap = "break-word";
    pre.innerHTML = message;
    return output.appendChild(pre);
  };

  return AuctionApp;

}).call(this);

console.log("auctionApp module loaded");

/*
//@ sourceMappingURL=AuctionApp.map
*/
